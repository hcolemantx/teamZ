
  pros::delay(15000);
    /*
    _____  ______ _____
  |  __ \|  ____|  __ \
  | |__) | |__  | |  | |
  |  _  /|  __| | |  | |
  | | \ \| |____| |__| |
  |_|  \_\______|_____/
  */
  //AUTO SELECTION
  ///*

  if(autoSelector.get_value() > 2050){
    //RED AUTO
    //rightwards, forwards, cw?
    //getting off the wall
    xModel->xArcade(0.6, 0, 0);
    pros::delay(1200); //moves right ~1 tile

    //turning towards topleft goal
    xModel->xArcade(0,0,-0.4); //ccw turn 45 deg
    pros::delay(500);

    //deploy
    xModel->xArcade(0,0,0); //sit still
    setOuttake();
    ejectorMotor -> move_velocity(600);
    pros::delay(400);
    setInBrake();
    ejectorMotor -> move_velocity(0);

    //driving into the top red goal
    xModel->xArcade(0,0.6,0); //moves forward til into goal
    pros::delay(400);
    setOuttake();
    ejectorMotor -> move_velocity(600);
    setIntake(); //turns on intake to grab tl red ball
    setCyBrake(); //brakes cycler to keep ball from going up
    pros::delay(600); //waits
    setInBrake(); //turns off intake to stop the blue balls from coming into it
    pros::delay(120);

    //scoring in topleft goal
    xModel->xArcade(0,0,0); //stops at the goal
    setInBrake();
    setCycle(); //turns on cycler to score in tl goal
    pros::delay(400); //time the cycler will run for
    setCyBrake();
    pros::delay(200); //making sure we dont have a trailing shot

    //backing out of the goal
    xModel -> xArcade(0, -0.6, 0); //backing up from the goal
    setReverse();
    setIntake();
    pros::delay(80);
    setCyBrake();
    pros::delay(500);
    setInBrake();
    pros::delay(1120); //time for the bot to back up

    //turning towards red driver station
    xModel->xArcade(0,0,-0.4); //ccw turn 45 deg
    pros::delay(450);

    //strafing to middle goal
    xModel->xArcade(-0.6,0,0); //strafing left to the middle goal
    pros::delay(1250); //time to get to the middle goal

    //driving into the middle red goal
    xModel->xArcade(0,0.7,0); //moves forward til into goal
    setIntake(); //making sure intake is off
    setCycle(); //brakes cycler to keep ball from going up
    pros::delay(100);
    setInBrake();
    setCyBrake();
    pros::delay(1000); //waits for this time

    //scoring in middle red goal
    setInBrake();
    xModel->xArcade(0,0,0); //stops at the goal
    setCycle(); //turns on cycler to score in tl goal
    pros::delay(600); //time the cycler will run for
    setCyBrake(); //turns off the cycler
    pros::delay(600); //making sure we dont have a trailing shot
    setReverse(); //making sure there were no blue balls that got into our robot
    setOuttake(); //making sure there were no blue balls that got into our robot
    pros::delay(600); //feel like there should be a delay between this movement

    //backing up to the white line
    xModel->xArcade(0, -1, 0); //speed it backsup at
    pros::delay(600); //time to backup for

    //strafing left to the bottom red goal
    xModel->xArcade(-1, 0, 0); //speed it strafes left at
    pros::delay(850); //time to strafe left for

    //turning to face the bottom red goal
    xModel->xArcade(0, 0, -0.6);
    pros::delay(350); //time to turn to the left;ix

    //driving forward to the bottom red goal
    xModel->xArcade(0, 0.5, 0);
    setIntake();
    pros::delay(800); //time to drive to the goal

    //scoring into the bottom red goal
    setCycle(); //turning on the intake
    setIntake();
    pros::delay(1500);
    setInBrake();
    pros::delay(500); //runs til the end of the auton
    setIntake();
    setEject();
    pros::delay(300);
    //backing out of the goal
    xModel->xArcade(0, -1, 0);
    pros::delay(400);
    xModel->xArcade(0, 0, 0);
    setOuttake();
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  ____  _     _    _ ______
  |  _ \| |   | |  | |  ____|
  | |_) | |   | |  | | |__
  |  _ <| |   | |  | |  __|
  | |_) | |___| |__| | |____
  |____/|______\____/|______|
  */
  } else if(autoSelector.get_value() < 2050){
    //BLUE AUTO
    //rightwards, forwards, cw?
    //getting off the wall
    xModel->xArcade(-0.6, 0, 0);
    pros::delay(1200); //moves left ~1 tile

    //turning towards topleft goal
    xModel->xArcade(0,0,0.4); //cw turn 45 deg
    pros::delay(500);

    //deploy
    xModel->xArcade(0,0,0); //sit still
    setOuttake();
    ejectorMotor -> move_velocity(600);
    pros::delay(400);
    setInBrake();
    ejectorMotor -> move_velocity(0);

    //driving into the top blue goal
    xModel->xArcade(0,0.6,0); //moves forward til into goal
    pros::delay(400);
    setOuttake();
    ejectorMotor -> move_velocity(600);
    setIntake(); //turns on intake to grab tl blue ball
    setCyBrake(); //brakes cycler to keep ball from going up
    pros::delay(600); //waits
    setInBrake(); //turns off intake to stop the blue balls from coming into it
    pros::delay(120);

    //scoring in topleft goal
    xModel->xArcade(0,0,0); //stops at the goal
    setInBrake();
    setCycle(); //turns on cycler to score in tl goal
    pros::delay(400); //time the cycler will run for
    setCyBrake();
    pros::delay(200); //making sure we dont have a trailing shot

    //backing out of the goal
    xModel -> xArcade(0, -0.6, 0); //backing up from the goal
    setReverse();
    setIntake();
    pros::delay(80);
    setCyBrake();
    pros::delay(500);
    setInBrake();
    pros::delay(1120); //time for the bot to back up

    //turning towards blue driver station
    xModel->xArcade(0,0,0.4); //CW turn 45 deg
    pros::delay(450);

    //strafing to middle goal
    xModel->xArcade(0.6,0,0); //strafing right to the middle goal
    pros::delay(1250); //time to get to the middle goal

    //driving into the middle blue goal
    xModel->xArcade(0,0.7,0); //moves forward til into goal
    setIntake(); //making sure intake is off
    setCycle(); //brakes cycler to keep ball from going up
    pros::delay(100);
    setInBrake();
    setCyBrake();
    pros::delay(1000); //waits for this time

    //scoring in middle blue goal
    setInBrake();
    xModel->xArcade(0,0,0); //stops at the goal
    setCycle(); //turns on cycler to score in tl goal
    pros::delay(600); //time the cycler will run for
    setCyBrake(); //turns off the cycler
    pros::delay(600); //making sure we dont have a trailing shot
    setReverse(); //making sure there were no blue balls that got into our robot
    setOuttake(); //making sure there were no blue balls that got into our robot
    pros::delay(600); //feel like there should be a delay between this movement

    //backing up to the white line
    xModel->xArcade(0, -1, 0); //speed it backsup at
    pros::delay(600); //time to backup for

    //strafing right to the bottom blue goal
    xModel->xArcade(1, 0, 0); //speed it strafes left at
    pros::delay(850); //time to strafe left for

    //turning to face the bottom blue goal right
    xModel->xArcade(0, 0, 0.6); //right turn
    pros::delay(350); //time to turn to the right;ix

    //driving forward to the bottom blue goal
    xModel->xArcade(0, 0.5, 0);
    setIntake();
    pros::delay(800); //time to drive to the goal

    //scoring into the bottom blue goal
    setCycle(); //turning on the intake
    setIntake();
    pros::delay(1500);
    setInBrake();
    pros::delay(500); //runs til the end of the auton
    setIntake();
    setEject();
    pros::delay(300);
    //backing out of the goal
    xModel->xArcade(0, -1, 0);
    pros::delay(400);
    xModel->xArcade(0, 0, 0);
    setOuttake();
  }


-include
-motor control
-getting controller input
-pros structure;
-odom
-mp
-okapi and pros libraries
-namespaces
-commenting

-how to build your code
-how to use github desktop
-how we write commit messages
-how to use pros
-when to branch and when to push

-prosv5 upload
-prosv5 build all

things to install

github desktop
gitbash
pros
atom

//pass x,y,t, xn, yn, tn to robot
//need to make the robot have the ability to move at an angle while progress to the goal

//rotate the controller by the extent of the theta
//find angle by side side, back back //contAngle = tan(contY / contX);
//add theta to angle //movementAngle = contAngle + robotTheta;
//convert composite angle back to x y input for xArcade.  //xArcadeX = 1 * cos(movementAngle)

//DO NOT TOUCH THIS CODE
  auto chassis = ChassisControllerBuilder()
.withMotors(frontLeftMotorPort, frontRightMotorPort, backRightMotorPort, backLeftMotorPort) //tl, tr, br, bl //  .withMotors(frontLeftMotor, frontRightMotor, backRightMotor, backLeftMotor)
.withDimensions(AbstractMotor::gearset::green, {{15_in, 15_in}, imev5GreenTPR})
.build();
  auto xModel = std::dynamic_pointer_cast<XDriveModel>(chassis->getModel());

  //MOVES FORWARD TO TOUCH GOAL
  xModel ->xArcade(0, 0.5, 0);
  controlIntake(FORWARD);
  controlIncycle(BRAKE);
  pros::delay(500);
  for(double i = 0.5; i < 1; i+=0.01){ //SLOWING DOWN AND ENTERING THE GOAL
    xModel ->xArcade(0, i, 0);
    pros::delay(10);
  }
  //TURNS OFF THE INTAKE AND SHOOTS IT INTO THE GOAL
  controlIntake(BRAKE);
  pros::delay(50);
  controlIncycle(FORWARD);
  for(double i = 0; i < 1; i+=0.01){ //BACKING UP SPEEDING UP
    xModel ->xArcade(0, -i, 0);
    pros::delay(10);
  }
  for(double i = 0; i > 0; i-=0.01){ //BACKING UP SLOWING DOWN
    xModel ->xArcade(0, -i, 0);
    pros::delay(10);
  }

  pros::delay(100);
  //STRAFING TO THE MIDDLE GOAL
  for(double i = 0; i < 1; i+=0.01){ //BACKING UP SPEEDING UP
    xModel ->xArcade(i, 0, 0);
    pros::delay(10);
  }
  for(double i = 0; i > 0; i-=0.01){ //BACKING UP SLOWING DOWN
    xModel ->xArcade(0, -i, 0);
    pros::delay(10);
  }



  //FIRST AUTON/*
  /*
  int xVelocity = 0;
  int yVelocity = 0;

  yVelocity = -0.1
  while(yVelocity < 1){
    xModel ->xArcade(xVelocity, yVelocity, 0);
    xVelocity += 0.01;
    yVelocity += 0.01;
  }

/*

pros::delay(20);
for(float i  = 0; i < 1; i+=0.01){
  int y = 1 - i;
      xModel->xArcade(i/2,y/2,0);
  pros::delay(20);
}
*/
xModel->xArcade(0,0.25,0);
pros::delay(6000);
for(float i = 0; i += 0.01; i < 1){
  xModel->xArcade(0, i, 0);
  pros::delay(10);
}
for(float i = 1; i -= 0.01; i > 0){
  xModel->xArcade(0, i, 0);
}
//take the input and strafe to it
